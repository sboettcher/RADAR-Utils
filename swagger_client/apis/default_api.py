# coding: utf-8

"""
    RADAR-CNS Downstream REST APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        self.config = Configuration()
        if api_client:
            self.api_client = api_client
            self.config.api_client = api_client
        else:
            if not self.config.api_client:
                self.config.api_client = ApiClient()
            self.api_client = self.config.api_client

    def get_all_sources_avro(self, subject_id, **kwargs):
        """
        Return a User value
        Return all known sources associated with the give subjectID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sources_avro(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_sources_avro_with_http_info(subject_id, **kwargs)
        else:
            (data) = self.get_all_sources_avro_with_http_info(subject_id, **kwargs)
            return data

    def get_all_sources_avro_with_http_info(self, subject_id, **kwargs):
        """
        Return a User value
        Return all known sources associated with the give subjectID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sources_avro_with_http_info(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sources_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_all_sources_avro`")


        collection_formats = {}

        resource_path = '/source/avro/getAllSources/{subjectId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_sources_json(self, subject_id, **kwargs):
        """
        Return a User value
        Return all known sources associated with the give subjectID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sources_json(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_sources_json_with_http_info(subject_id, **kwargs)
        else:
            (data) = self.get_all_sources_json_with_http_info(subject_id, **kwargs)
            return data

    def get_all_sources_json_with_http_info(self, subject_id, **kwargs):
        """
        Return a User value
        Return all known sources associated with the give subjectID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_sources_json_with_http_info(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sources_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_all_sources_json`")


        collection_formats = {}

        resource_path = '/source/getAllSources/{subjectId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_subjects_avro(self, study_id, **kwargs):
        """
        Return a list of subjects
        Each subject can have multiple sourceID associated with him
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_subjects_avro(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_subjects_avro_with_http_info(study_id, **kwargs)
        else:
            (data) = self.get_all_subjects_avro_with_http_info(study_id, **kwargs)
            return data

    def get_all_subjects_avro_with_http_info(self, study_id, **kwargs):
        """
        Return a list of subjects
        Each subject can have multiple sourceID associated with him
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_subjects_avro_with_http_info(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_subjects_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_all_subjects_avro`")


        collection_formats = {}

        resource_path = '/subject/avro/getAllSubjects/{studyId}'.replace('{format}', 'json')
        path_params = {}
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_subjects_json(self, study_id, **kwargs):
        """
        Return a list of subjects
        Each subject can have multiple sourceID associated with him
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_subjects_json(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_subjects_json_with_http_info(study_id, **kwargs)
        else:
            (data) = self.get_all_subjects_json_with_http_info(study_id, **kwargs)
            return data

    def get_all_subjects_json_with_http_info(self, study_id, **kwargs):
        """
        Return a list of subjects
        Each subject can have multiple sourceID associated with him
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_subjects_json_with_http_info(study_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str study_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['study_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_subjects_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'study_id' is set
        if ('study_id' not in params) or (params['study_id'] is None):
            raise ValueError("Missing the required parameter `study_id` when calling `get_all_subjects_json`")


        collection_formats = {}

        resource_path = '/subject/getAllSubjects/{studyId}'.replace('{format}', 'json')
        path_params = {}
        if 'study_id' in params:
            path_params['studyId'] = params['study_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_computed_source_status_avro(self, subject_id, source_id, **kwargs):
        """
        Return a SourceDefinition values
        Using the source sensors values arrived within last 60sec, it computes thesender status for the given subjectID and sourceID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_computed_source_status_avro(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_computed_source_status_avro_with_http_info(subject_id, source_id, **kwargs)
        else:
            (data) = self.get_last_computed_source_status_avro_with_http_info(subject_id, source_id, **kwargs)
            return data

    def get_last_computed_source_status_avro_with_http_info(self, subject_id, source_id, **kwargs):
        """
        Return a SourceDefinition values
        Using the source sensors values arrived within last 60sec, it computes thesender status for the given subjectID and sourceID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_computed_source_status_avro_with_http_info(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_computed_source_status_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_last_computed_source_status_avro`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_last_computed_source_status_avro`")


        collection_formats = {}

        resource_path = '/source/avro/state/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_computed_source_status_json(self, subject_id, source_id, **kwargs):
        """
        Return a SourceDefinition values
        Using the source sensors values arrived within last 60sec, it computes thesender status for the given subjectID and sourceID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_computed_source_status_json(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_computed_source_status_json_with_http_info(subject_id, source_id, **kwargs)
        else:
            (data) = self.get_last_computed_source_status_json_with_http_info(subject_id, source_id, **kwargs)
            return data

    def get_last_computed_source_status_json_with_http_info(self, subject_id, source_id, **kwargs):
        """
        Return a SourceDefinition values
        Using the source sensors values arrived within last 60sec, it computes thesender status for the given subjectID and sourceID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_computed_source_status_json_with_http_info(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_computed_source_status_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_last_computed_source_status_json`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_last_computed_source_status_json`")


        collection_formats = {}

        resource_path = '/source/state/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_received_app_status_avro(self, subject_id, source_id, **kwargs):
        """
        Return an Applications status
        The Android application periodically updates its current status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_app_status_avro(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_received_app_status_avro_with_http_info(subject_id, source_id, **kwargs)
        else:
            (data) = self.get_last_received_app_status_avro_with_http_info(subject_id, source_id, **kwargs)
            return data

    def get_last_received_app_status_avro_with_http_info(self, subject_id, source_id, **kwargs):
        """
        Return an Applications status
        The Android application periodically updates its current status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_app_status_avro_with_http_info(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_received_app_status_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_last_received_app_status_avro`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_last_received_app_status_avro`")


        collection_formats = {}

        resource_path = '/android/avro/status/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_received_app_status_json(self, subject_id, source_id, **kwargs):
        """
        Return an Applications status
        The Android application periodically updates its current status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_app_status_json(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_received_app_status_json_with_http_info(subject_id, source_id, **kwargs)
        else:
            (data) = self.get_last_received_app_status_json_with_http_info(subject_id, source_id, **kwargs)
            return data

    def get_last_received_app_status_json_with_http_info(self, subject_id, source_id, **kwargs):
        """
        Return an Applications status
        The Android application periodically updates its current status
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_app_status_json_with_http_info(subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_received_app_status_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_last_received_app_status_json`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_last_received_app_status_json`")


        collection_formats = {}

        resource_path = '/android/status/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_received_sample_avro(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in Apache AVRO.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns the last computed result of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in Apache AVRO.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_sample_avro(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_received_sample_avro_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
        else:
            (data) = self.get_last_received_sample_avro_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
            return data

    def get_last_received_sample_avro_with_http_info(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in Apache AVRO.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns the last computed result of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in Apache AVRO.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_sample_avro_with_http_info(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor', 'stat', 'interval', 'subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_received_sample_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `get_last_received_sample_avro`")
        # verify the required parameter 'stat' is set
        if ('stat' not in params) or (params['stat'] is None):
            raise ValueError("Missing the required parameter `stat` when calling `get_last_received_sample_avro`")
        # verify the required parameter 'interval' is set
        if ('interval' not in params) or (params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `get_last_received_sample_avro`")
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_last_received_sample_avro`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_last_received_sample_avro`")


        collection_formats = {}

        resource_path = '/data/avro/realTime/{sensor}/{stat}/{interval}/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']
        if 'stat' in params:
            path_params['stat'] = params['stat']
        if 'interval' in params:
            path_params['interval'] = params['interval']
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_last_received_sample_json(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in JSON.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns the last computed result of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in JSON.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_sample_json(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_last_received_sample_json_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
        else:
            (data) = self.get_last_received_sample_json_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
            return data

    def get_last_received_sample_json_with_http_info(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in JSON.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns the last computed result of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in JSON.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_last_received_sample_json_with_http_info(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor', 'stat', 'interval', 'subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_last_received_sample_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `get_last_received_sample_json`")
        # verify the required parameter 'stat' is set
        if ('stat' not in params) or (params['stat'] is None):
            raise ValueError("Missing the required parameter `stat` when calling `get_last_received_sample_json`")
        # verify the required parameter 'interval' is set
        if ('interval' not in params) or (params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `get_last_received_sample_json`")
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_last_received_sample_json`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_last_received_sample_json`")


        collection_formats = {}

        resource_path = '/data/realTime/{sensor}/{stat}/{interval}/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']
        if 'stat' in params:
            path_params['stat'] = params['stat']
        if 'interval' in params:
            path_params['interval'] = params['interval']
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_samples_avro(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in Apache AVRO.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in Apache AVRO.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_avro(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_samples_avro_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
        else:
            (data) = self.get_samples_avro_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
            return data

    def get_samples_avro_with_http_info(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in Apache AVRO.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in Apache AVRO.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_avro_with_http_info(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor', 'stat', 'interval', 'subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `get_samples_avro`")
        # verify the required parameter 'stat' is set
        if ('stat' not in params) or (params['stat'] is None):
            raise ValueError("Missing the required parameter `stat` when calling `get_samples_avro`")
        # verify the required parameter 'interval' is set
        if ('interval' not in params) or (params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `get_samples_avro`")
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_samples_avro`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_samples_avro`")


        collection_formats = {}

        resource_path = '/data/avro/{sensor}/{stat}/{interval}/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']
        if 'stat' in params:
            path_params['stat'] = params['stat']
        if 'interval' in params:
            path_params['interval'] = params['interval']
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_samples_json(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in JSON.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in JSON.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_json(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_samples_json_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
        else:
            (data) = self.get_samples_json_with_http_info(sensor, stat, interval, subject_id, source_id, **kwargs)
            return data

    def get_samples_json_with_http_info(self, sensor, stat, interval, subject_id, source_id, **kwargs):
        """
        Returns a dataset object formatted in JSON.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor. Data can be queried using different time-frame resolutions. The response is formatted in JSON.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_json_with_http_info(sensor, stat, interval, subject_id, source_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor', 'stat', 'interval', 'subject_id', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `get_samples_json`")
        # verify the required parameter 'stat' is set
        if ('stat' not in params) or (params['stat'] is None):
            raise ValueError("Missing the required parameter `stat` when calling `get_samples_json`")
        # verify the required parameter 'interval' is set
        if ('interval' not in params) or (params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `get_samples_json`")
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_samples_json`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_samples_json`")


        collection_formats = {}

        resource_path = '/data/{sensor}/{stat}/{interval}/{subjectId}/{sourceId}'.replace('{format}', 'json')
        path_params = {}
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']
        if 'stat' in params:
            path_params['stat'] = params['stat']
        if 'interval' in params:
            path_params['interval'] = params['interval']
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_samples_within_window_avro(self, sensor, stat, interval, subject_id, source_id, start, end, **kwargs):
        """
        Returns a dataset object formatted in Apache AVRO.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor belonging to the time window [start - end]. Data can be queried using different time-frame resolutions. The response is formatted in Apache AVRO.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_within_window_avro(sensor, stat, interval, subject_id, source_id, start, end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :param int start: (required)
        :param int end: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_samples_within_window_avro_with_http_info(sensor, stat, interval, subject_id, source_id, start, end, **kwargs)
        else:
            (data) = self.get_samples_within_window_avro_with_http_info(sensor, stat, interval, subject_id, source_id, start, end, **kwargs)
            return data

    def get_samples_within_window_avro_with_http_info(self, sensor, stat, interval, subject_id, source_id, start, end, **kwargs):
        """
        Returns a dataset object formatted in Apache AVRO.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor belonging to the time window [start - end]. Data can be queried using different time-frame resolutions. The response is formatted in Apache AVRO.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_within_window_avro_with_http_info(sensor, stat, interval, subject_id, source_id, start, end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str interval: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :param int start: (required)
        :param int end: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor', 'stat', 'interval', 'subject_id', 'source_id', 'start', 'end']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples_within_window_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `get_samples_within_window_avro`")
        # verify the required parameter 'stat' is set
        if ('stat' not in params) or (params['stat'] is None):
            raise ValueError("Missing the required parameter `stat` when calling `get_samples_within_window_avro`")
        # verify the required parameter 'interval' is set
        if ('interval' not in params) or (params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `get_samples_within_window_avro`")
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_samples_within_window_avro`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_samples_within_window_avro`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_samples_within_window_avro`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_samples_within_window_avro`")


        collection_formats = {}

        resource_path = '/data/avro/{sensor}/{stat}/{interval}/{subjectId}/{sourceId}/{start}/{end}'.replace('{format}', 'json')
        path_params = {}
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']
        if 'stat' in params:
            path_params['stat'] = params['stat']
        if 'interval' in params:
            path_params['interval'] = params['interval']
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']
        if 'start' in params:
            path_params['start'] = params['start']
        if 'end' in params:
            path_params['end'] = params['end']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_samples_within_window_json(self, sensor, stat, subject_id, source_id, interval, start, end, **kwargs):
        """
        Returns a dataset object formatted in JSON.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor belonging to the time window [start - end]. Data can be queried using different time-frame resolutions. The response is formatted in JSON.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_within_window_json(sensor, stat, subject_id, source_id, interval, start, end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :param str interval: (required)
        :param int start: (required)
        :param int end: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_samples_within_window_json_with_http_info(sensor, stat, subject_id, source_id, interval, start, end, **kwargs)
        else:
            (data) = self.get_samples_within_window_json_with_http_info(sensor, stat, subject_id, source_id, interval, start, end, **kwargs)
            return data

    def get_samples_within_window_json_with_http_info(self, sensor, stat, subject_id, source_id, interval, start, end, **kwargs):
        """
        Returns a dataset object formatted in JSON.
        Each collected sample is aggregated to provide near real-time statistical results. This end-point returns all available results of type stat for the given subjectID, sourceID, and sensor belonging to the time window [start - end]. Data can be queried using different time-frame resolutions. The response is formatted in JSON.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_samples_within_window_json_with_http_info(sensor, stat, subject_id, source_id, interval, start, end, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sensor: (required)
        :param str stat: (required)
        :param str subject_id: (required)
        :param str source_id: (required)
        :param str interval: (required)
        :param int start: (required)
        :param int end: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sensor', 'stat', 'subject_id', 'source_id', 'interval', 'start', 'end']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples_within_window_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `get_samples_within_window_json`")
        # verify the required parameter 'stat' is set
        if ('stat' not in params) or (params['stat'] is None):
            raise ValueError("Missing the required parameter `stat` when calling `get_samples_within_window_json`")
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_samples_within_window_json`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_samples_within_window_json`")
        # verify the required parameter 'interval' is set
        if ('interval' not in params) or (params['interval'] is None):
            raise ValueError("Missing the required parameter `interval` when calling `get_samples_within_window_json`")
        # verify the required parameter 'start' is set
        if ('start' not in params) or (params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_samples_within_window_json`")
        # verify the required parameter 'end' is set
        if ('end' not in params) or (params['end'] is None):
            raise ValueError("Missing the required parameter `end` when calling `get_samples_within_window_json`")


        collection_formats = {}

        resource_path = '/data/{sensor}/{stat}/{interval}/{subjectId}/{sourceId}/{start}/{end}'.replace('{format}', 'json')
        path_params = {}
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']
        if 'stat' in params:
            path_params['stat'] = params['stat']
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']
        if 'interval' in params:
            path_params['interval'] = params['interval']
        if 'start' in params:
            path_params['start'] = params['start']
        if 'end' in params:
            path_params['end'] = params['end']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_source_specification_avro(self, source_type, **kwargs):
        """
        Return a SourceDefinition specification
        Return the data specification of all on-board sensors for the givensource type
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_source_specification_avro(source_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_source_specification_avro_with_http_info(source_type, **kwargs)
        else:
            (data) = self.get_source_specification_avro_with_http_info(source_type, **kwargs)
            return data

    def get_source_specification_avro_with_http_info(self, source_type, **kwargs):
        """
        Return a SourceDefinition specification
        Return the data specification of all on-board sensors for the givensource type
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_source_specification_avro_with_http_info(source_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_specification_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_type' is set
        if ('source_type' not in params) or (params['source_type'] is None):
            raise ValueError("Missing the required parameter `source_type` when calling `get_source_specification_avro`")


        collection_formats = {}

        resource_path = '/source/avro/specification/{sourceType}'.replace('{format}', 'json')
        path_params = {}
        if 'source_type' in params:
            path_params['sourceType'] = params['source_type']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_source_specification_json(self, source_type, **kwargs):
        """
        Return a SourceDefinition specification
        Return the data specification of all on-board sensors for the givensource type
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_source_specification_json(source_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_source_specification_json_with_http_info(source_type, **kwargs)
        else:
            (data) = self.get_source_specification_json_with_http_info(source_type, **kwargs)
            return data

    def get_source_specification_json_with_http_info(self, source_type, **kwargs):
        """
        Return a SourceDefinition specification
        Return the data specification of all on-board sensors for the givensource type
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_source_specification_json_with_http_info(source_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str source_type: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_source_specification_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_type' is set
        if ('source_type' not in params) or (params['source_type'] is None):
            raise ValueError("Missing the required parameter `source_type` when calling `get_source_specification_json`")


        collection_formats = {}

        resource_path = '/source/specification/{sourceType}'.replace('{format}', 'json')
        path_params = {}
        if 'source_type' in params:
            path_params['sourceType'] = params['source_type']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_subject_avro(self, subject_id, **kwargs):
        """
        Return the information related to given subject identifier
        Some information are not implemented yet. The returned values are hardcoded.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subject_avro(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_subject_avro_with_http_info(subject_id, **kwargs)
        else:
            (data) = self.get_subject_avro_with_http_info(subject_id, **kwargs)
            return data

    def get_subject_avro_with_http_info(self, subject_id, **kwargs):
        """
        Return the information related to given subject identifier
        Some information are not implemented yet. The returned values are hardcoded.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subject_avro_with_http_info(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subject_avro" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_subject_avro`")


        collection_formats = {}

        resource_path = '/subject/avro/getSubject/{subjectId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_subject_json(self, subject_id, **kwargs):
        """
        Return the information related to given subject identifier
        Some information are not implemented yet. The returned values are hardcoded.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subject_json(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_subject_json_with_http_info(subject_id, **kwargs)
        else:
            (data) = self.get_subject_json_with_http_info(subject_id, **kwargs)
            return data

    def get_subject_json_with_http_info(self, subject_id, **kwargs):
        """
        Return the information related to given subject identifier
        Some information are not implemented yet. The returned values are hardcoded.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_subject_json_with_http_info(subject_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str subject_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subject_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subject_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params) or (params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_subject_json`")


        collection_formats = {}

        resource_path = '/subject/getSubject/{subjectId}'.replace('{format}', 'json')
        path_params = {}
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
